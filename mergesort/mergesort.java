import java.util.Arrays;
import java.lang.Thread;

public class mergesort {
    static int inversions = 0;

    public static void main(String[] args) {
//        int[] arr = {1,0,5,4,6,2,10};
        int[] arr = {1, 2, 5, 14, 18, 19, 28, 31, 35, 40, 40, 48, 57, 57, 66, 68, 70, 70, 76, 84, 90, 90, 101, 101, 105, 108, 108, 109, 115, 116, 15, 117, 123, 128, 133, 135, 142, 144, 146, 150, 151, 156, 172, 173, 176, 176, 85, 176, 178, 180, 185, 188, 80, 189, 121, 206, 209, 210, 211, 213, 215, 218, 222, 223, 223, 228, 229, 229, 232, 236, 242, 232, 246, 247, 248, 251, 256, 257, 261, 262, 266, 268, 274, 120, 279, 224, 280, 284, 259, 289, 290, 292, 293, 189, 294, 296, 304, 188, 324, 326, 330, 216, 331, 334, 334, 336, 338, 344, 357, 360, 185, 361, 361, 366, 373, 374, 375, 374, 381, 77, 58, 382, 382, 383, 388, 389, 393, 399, 406, 407, 191, 411, 414, 414, 36, 415, 421, 421, 424, 427, 442, 406, 120, 451, 452, 453, 453, 453, 454, 456, 100, 461, 466, 469, 326, 417, 381, 329, 277, 278, 318, 203, 469, 469, 470, 391, 471, 273, 473, 412, 296, 477, 478, 406, 482, 483, 270, 483, 493, 493, 497, 276, 14, 283, 130, 500, 502, 72, 141, 506, 268, 506, 206, 185, 507, 447, 134, 507, 13, 507, 312, 486, 170, 516, 325, 429, 353, 517, 519, 333, 86, 423, 291, 523, 529, 470, 423, 529, 533, 535, 264, 153, 535, 536, 282, 546, 531, 549, 549, 549, 552, 555, 378, 231, 559, 559, 560, 565, 566, 417, 320, 102, 567, 407, 568, 568, 571, 287, 571, 572, 415, 287, 70, 394, 577, 424, 583, 364, 429, 218, 424, 584, 586, 524, 155, 596, 378, 599, 99, 602, 190, 606, 529, 608, 396, 129, 608, 97, 608, 496, 609, 609, 472, 611, 613, 613, 618, 623, 623, 472, 625, 625, 470, 36, 628, 629, 631, 557, 341, 634, 634, 259, 639, 485, 130, 233, 639, 202, 426, 402, 640, 418, 640, 642, 642, 643, 200, 644, 644, 645, 552, 646, 649, 651, 404, 652, 653, 361, 656, 661, 662, 664, 55, 666, 199, 188, 666, 348, 669, 677, 665, 54, 472, 474, 684, 667, 689, 689, 240, 358, 692, 438, 87, 696, 699, 703, 705, 160, 197, 706, 509, 334, 707, 707, 184, 490, 195, 45, 271, 491, 68, 526, 560, 356, 709, 175, 521, 584, 23, 709, 87, 671, 63, 710, 463, 402, 502, 712, 712, 268, 278, 269, 284, 339, 451, 544, 355, 400, 579, 566, 713, 86, 627, 633, 719, 721, 521, 117, 711, 419, 431, 359, 722, 615, 723, 233, 526, 723, 726, 409, 160, 728, 216, 622, 729, 730, 253, 693, 612, 248, 733, 735, 691, 160, 189, 737, 437, 10, 265, 738, 738, 738, 362, 688, 739, 744, 744, 372, 745, 285, 297, 491, 748, 245, 484, 749, 94, 351, 518, 204, 616, 443, 750, 417, 541, 251, 226, 752, 752, 49, 757, 604, 659, 757, 760, 762, 270, 386, 394, 765, 769, 771, 720, 773, 114, 775, 574, 428, 185, 328, 61, 620, 244, 205, 142, 357, 555, 776, 428, 775, 76, 601, 777, 343, 778, 779, 625, 780, 788, 499, 422, 714, 789, 555, 791, 586, 240, 725, 388, 505, 324, 791, 474, 535, 147, 512, 791, 154, 793, 680, 794, 781, 390, 715, 795, 796, 130, 471, 463, 796, 683, 78, 770, 150, 797, 644, 210, 483, 798, 107, 72, 462, 233, 798, 498, 361, 798, 802, 778, 671, 802, 669, 321, 273, 803, 174, 805, 172, 5, 203, 726, 317, 806, 420, 807, 414, 808, 808, 103, 808, 809, 809, 809, 809, 288, 809, 811, 105, 568, 330, 390, 432, 693, 486, 453, 681, 18, 590, 811, 206, 809, 546, 511, 302, 578, 607, 499, 458, 265, 59, 434, 129, 531, 812, 180, 592, 652, 629, 813, 103, 394, 814, 814, 817, 818, 823, 823, 824, 449, 824, 802, 825, 827, 828, 830, 708, 707, 89, 716, 318, 749, 105, 423, 424, 832, 38, 832, 628, 726, 109, 546, 5, 540, 833, 354, 754, 103, 793, 820, 334, 784, 835, 836, 839, 515, 643, 840, 841, 144, 611, 383, 774, 159, 14, 833, 772, 713, 193, 768, 763, 846, 846, 81, 235, 53, 527, 161, 847, 581, 373, 463, 849, 30, 851, 361, 837, 409, 340, 406, 852, 826, 135, 189, 833, 174, 811, 481, 166, 504, 847, 281, 664, 450, 599, 292, 550, 170, 19, 853, 854, 855, 423, 383, 857, 456, 64, 575, 858, 564, 542, 510, 322, 403, 860, 793, 420, 861, 474, 457, 319, 862, 862, 784, 373, 733, 468, 212, 856, 863, 202, 620, 864, 224, 834, 746, 813, 675, 743, 54, 866, 868, 868, 63, 224, 77, 218, 261, 753, 570, 868, 336, 164, 292, 423, 1, 755, 157, 240, 740, 226, 868, 549, 639, 842, 778, 102, 360, 12, 809, 473, 869, 748, 566, 818, 718, 865, 636, 49, 202, 116, 395, 383, 725, 357, 870, 871, 434, 108, 875, 875, 679, 755, 539, 286, 446, 194, 610, 877, 878, 776, 416, 256, 880, 15, 56, 881, 882, 882, 556, 858, 90, 883, 884, 887, 888, 422, 527, 888, 889, 408, 663, 571, 480, 745, 846, 587, 620, 891, 166, 767, 225, 850, 49, 695, 843, 3, 619, 890, 706, 209, 542, 3, 208, 69, 602, 206, 893, 893, 893, 894, 391, 722, 0, 486, 896, 897, 899, 900, 906, 908, 837, 335, 409, 60, 774, 909, 911, 911, 911, 914, 917, 920, 920, 920, 55, 922, 326, 683, 476, 925, 925, 927, 927, 928, 930, 931, 931, 598, 75, 508, 317, 920, 340, 789, 638, 916, 519, 462, 930, 143, 518, 888, 722, 549, 64, 605, 682, 718, 934, 934, 936, 709, 938, 939, 940, 940, 942, 942, 942, 943, 943, 944, 944, 945, 728, 946, 948, 948, 949, 952, 953, 953, 954, 955, 956, 957, 957, 957, 958, 958, 960, 960, 960, 961, 963, 964, 966, 966, 967, 969, 969, 974, 974, 976, 977, 978, 978, 978, 981, 982, 983, 983, 984, 985, 985, 987, 988, 988, 988, 989, 990, 991, 991, 995, 995, 995, 995, 995, 998, 998};
        mergesort(arr);
//        try {Thread.sleep(2000);} catch (Exception e) {}
        System.out.println(Arrays.toString(arr));
    }

    public static void mergesort(int[] arr) {
        mergesort(arr, 0, arr.length);
    }

    public static void mergesort(int[] arr, int left, int right) {
        if (left < right) {
            int middle = (right + left) / 2;
            mergesort(arr, left, middle);
            mergesort(arr, middle + 1, right);
            merge(arr, middle);
            System.out.println("merge\n");
        }
    }

    public static void merge(int[] arr, int m) {
        int[] tempArr = new int[arr.length];
        int i = 0;
        int j = m+1;
        
        for (int k = 0; k < arr.length; k++) {
            if (j > arr.length-1) {
                tempArr[k] = arr[i];
                i++;
            }
            else if (i > m) {
                tempArr[k] = arr[j];
                j++;
            }
            else if (arr[i] < arr[j]) {
                
                if (i < j && j < arr.length) {
                    if (arr[i] > arr[j]) {
                        ++inversions;
                        System.out.println(inversions);
                    }
                }
                
                tempArr[k] = arr[i];
                i++;
            }
            else {
                
                if (i < j && j < arr.length) {
                    if (arr[i] > arr[j]) {
                        ++inversions;
//                        System.out.println(inversions);
                    }
                }
                
                tempArr[k] = arr[j];
                j++;
            }
    
            
        }
        
        for (int k = 0; k < arr.length; k++) {
            arr[k] = tempArr[k];
        }
        
    }
    
}
